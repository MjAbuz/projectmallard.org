<page xmlns="http://projectmallard.org/1.0/"
      type="topic" style="spec-details"
      id="fallback">

<info>
  <revision docversion="1.0" date="2015-03-28" status="final"/>

  <link type="guide" xref="index" group="notes"/>

  <credit type="author copyright">
    <name>Shaun McCance</name>
    <email>shaunm@gnome.org</email>
    <years>2011</years>
  </credit>

  <desc>Details on behavior of tools that donâ€™t implement conditionals.</desc>

  <include href="../../cc-by-sa-3-0.xml" xmlns="http://www.w3.org/2001/XInclude" />
</info>

<title>Fallback Behavior</title>

<p>Mallard Conditionals is an extension to the core Mallard vocabulary. Not all
Mallard processing tools will support all extensions. Mallard has well-defined
rules for how to handle unknown extension elements and attributes. This page
provides examples for how Conditionals elements will be handled by processing
tools that do not support this extension.</p>

<p>In Mallard, unknown attributes are ignored. When you use the
<link xref="if_attr_test">if:test</link> attribute on any block element or
list item, a non-supporting tool will ignore the attribute and display the
element unconditionally. The following is always shown by a non-supporting
tool:</p>

<example>
<code mime="application/xml"><![CDATA[
<p if:test="target:html">YES</p>
]]></code>
</example>

<p>The <code xref="if_if">if:if</code> and <code xref="if_choose">if:choose</code>
elements occur in block context. When a processing tool encounters an unknown
element in block context, it processes the children in <em>restricted</em>
block context. In restricted block context, unknown elements are ignored.</p>

<p>If you use an <code>if:if</code> element with simple block content, such as a
paragraph, a non-supporting tool will always display the content.</p>

<example>
<code mime="application/xml"><![CDATA[
<if:if test="target:html">
  <p>YES</p>
</if:if>
]]></code>
</example>

<p>If, however, you nest an <code>if:if</code> element in an <code>if:if</code>
element, the inner element will be processed in restricted block context, so
it will not be shown. You can use this to hide content from a non-supporting
tool, for example by repeating the same condition.</p>

<example>
<code mime="application/xml"><![CDATA[
<if:if test="target:html">
  <if:if test="target:html">
    <p>NO</p>
  </if:if>
</if:if>
]]></code>
</example>

<p>Because <code>if:when</code> elements are always children of <code>if:choose</code>
elements, non-supporting tools will always process them in restricted block context,
so they will not be displayed. The same is true for <code>if:else</code> elements.</p>

<example>
<code mime="application/xml"><![CDATA[
<if:choose>
  <if:when test="target:html">
    <p>NO</p>
  </if:when>
  <if:else>
    <p>NO</p>
  </if:else>
</if:choose>
]]></code>
</example>

<p>This specification allows two different ways to provide fallback content for
<code>if:choose</code> elements. Instead of using an <code>if:else</code> element,
you can put fallback block content directly in the <code>if:choose</code> element.
Supporting tools will treat this exactly as if you had used an <code>if:else</code>
element, but non-supporting tools will show this fallback content.</p>

<example>
<code mime="application/xml"><![CDATA[
<if:choose>
  <if:when test="target:html">
    <p>NO</p>
  </if:when>
  <p>YES</p>
</if:choose>
]]></code>
</example>

</page>
