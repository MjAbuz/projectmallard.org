<page xmlns="http://projectmallard.org/1.0/"
      type="topic" style="spec spec-no-comparison spec-no-schema"
      id="duck_attr">

<info>
  <link type="guide" xref="index" group="attr"/>

  <revision docversion="1.0" date="2018-02-12" status="candidate"/>

  <credit type="author copyright">
    <name>Shaun McCance</name>
    <email>shaunm@gnome.org</email>
    <years>2015-2018</years>
  </credit>

  <desc>XML-like attributes with shorthand notations.</desc>

  <include href="../../cc-by-sa-3-0.xml" xmlns="http://www.w3.org/2001/XInclude"/>
</info>

<title>Attribute Lists</title>

<p style="lead">Attributes provide extra information for elements as
key-value pairs. Ducktype attributes are similar to XML, except they
allow certain shorthand notations.</p>


<!-- BEGIN notes -->
<section id="notes">
  <title>Notes</title>

  <list>
    <item><p>An attribute list starts with a left square bracket and
    continues to the first unescaped and unquoted right square bracket.</p></item>

    <item><p>Attribute lists can occur after
    <link xref="duck_page">headers</link>, in
    <link xref="duck_info">info elements</link>, in
    <link xref="duck_block">block elements, and in
    <link xref="duck_inline">inline elements</link>. In block elements,
    attribute lists are part of the block declaration.</link></p></item>

    <item><p>An attribute list is a space-separated list of attributes.
    Each attribute is a name and a value separated by an equals sign,
    except for certain shorthand notations.</p></item>

    <item><p>Attribute values can be quoted with single or double quotes,
    or they can be unquoted if the value contains no spaces.</p></item>

    <item>
      <p>An attribute without an equals sign is a bare word. Bare
      words are shorthand attributes:</p>
      <list>
        <item><p>If the bare word starts with <code>.</code>, it
        is a <code>style</code> attribute.</p></item>
        <item><p>If the bare word starts with <code>#</code>, it
        is an <code>id</code> attribute.</p></item>
        <item><p>If the bare word starts with <code>>></code>, it
        is an <code>href</code> attribute.</p></item>
        <item><p>If the bare word starts with <code>></code>, it
        is an <code>xref</code> attribute.</p></item>
        <item><p>Otherwise, the bare word is a <code>type</code>
        attribute.</p></item>
      </list>
    </item>

    <item><p>Attribute values may contain
    <link xref="duck_directive#define">entity</link> references. An
    entity reference is <code>$</code> followed by the entity name
    followed by <code>;</code>.</p></item>
  </list>
</section>
<!-- END notes -->


<!-- BEGIN examples -->
<section id="examples">
  <title>Examples</title>

  <p>Specify that a page is a guide page:</p>
  <example><code mime="text/x-ducktype">
= My Page Title
  [type=guide]
</code></example>

  <p>Specify that a page is a guide page using shorthand notation:</p>
  <example><code mime="text/x-ducktype">
= My Page Title
  [guide]
</code></example>

  <p>Use an <link xref="duck_info">info element</link> to create a guide link,
  using shorthand notation for the <code>type</code> and <code>xref</code>
  attributes:</p>
  <example><code mime="text/x-ducktype">= My Page Title
@link[guide >index]
</code></example>

  <p>Attribute lists on <link xref="duck_block">block elments</link> share
  the starting bracket with the element declaration. Use a <code>style</code>
  attribute on a <code>note</code>:</p>
  <example><code mime="text/x-ducktype">
[note style=warning]
  This is a warning.</code></example>

  <p>Use shorthand notation for a <code>style</code> attribute:</p>
  <example><code mime="text/x-ducktype">
[note .warning]
  This is a warning.</code></example>

  <p>Use shorthand notation for a <code>xref</code> attribute in a
  <code>link</code> <link xref="duck_inline">inline element</link>:</p>
  <example><code mime="text/x-ducktype">
Learn more about $xref[>duck_inline](inline elements).</code></example>
</section>
<!-- END examples -->


<!-- BEGIN spec -->
<section id="spec">
  <title>Specification</title>

  <p>Attribute lists occur in four places: header attribute lists for
  <link xref="duck_page">pages and sections</link>, in
  <link xref="duck_info">informational elements</link>, in
  <link xref="duck_block">block elements</link>, and in
  <link xref="duck_inline">inline elements</link>.
  For header, informational, and inline elements attribute lists, the attribute
  list starts with a left square bracket. For block attribute lists, the block
  declaration itself starts with a left square bracket, so the attribute list
  begins with the first whitespace character after the block name.</p>

  <p>An attribute list is a space-separated list of key-value pairs in the
  form <code><var>name</var>=<var>value</var></code>. If the value is quoted
  with a single or double quote, the value finishes when that
  quote character is encountered. However, the quote character itself may be
  escaped in the value as <code>$'</code> or <code>$"</code> or using other
  entity values (described below). Furthermore, <code>$</code> itself may be
  escaped as <code>$$</code>.</p>

  <p>If the value is not quoted, it ends with the first whitespace character
  or right square bracket, unless the right square bracket is escaped as
  <code>$]</code>. An unescaped right square bracket (outside a quoted value)
  ends the attribute list. Unlike XML, no space is allowed around
  the <code>=</code> character.</p>

  <p>The full attribute list may contain newlines as insignificant
  whitespace or as part of values. If the parser is inside the
  attribute list, only a square bracket may end it. Normal indentation
  requirements do not hold in an attribute list except for attribute lists
  on inline elements. Because block and inline parsing can be done in separate
  steps, if newlines occur in inline attribute lists, the new lines must be
  indented to at least the inner indent of the containing block.</p>

  <p>In addition to regular key-value pairs, bare words are allowed in
  attribute lists, possibly with leading sigils, for common cases. A bare
  word starts either with the sigil or a non-whitespace character, and
  finishes at the first whitespace character or an unescaped right square bracket.</p>

  <list>
    <item><p>If the word starts with <code>>></code>, the value is taken
    as the value of the <code>href</code> attribute.</p></item>
    <item><p>If the word starts with <code>></code>, the value is taken
    as the value of the <code>xref</code> attribute.</p></item>
    <item><p>If the word starts with <code>.</code>, the value is taken
    as the value of the <code>style</code> attribute.</p></item>
    <item><p>If the word starts with <code>#</code>, the value is taken
    as the value of the <code>id</code> attribute.</p></item>
    <item><p>Otherwise, the value is taken as the value of the
    <code>type</code> attribute.</p></item>
  </list>

  <p>For the <code>type</code> and <code>style</code> attributes only,
  multiple values are joined with a space character.</p>

  <section id="prop-attr-vals">
    <title>Attribute Values</title>

    <p>Attribute values are parsed to allow character escapes and entities.
    If the character <code>$</code> (U+0024) is followed by one of
    <code>$</code> (U+0024), <code>*</code> (U+002A), <code>=</code> (U+003D),
    <code>-</code> (U+002D), <code>@</code> (U+0040), <code>[</code> (U+005B),
    <code>]</code> (U+005D), <code>(</code> (U+0028), <code>)</code> (U+0029),
    <code>"</code> (U+0022), or <code>'</code> (U+0027), that two-character
    sequence is replaced by the second character.</p>

    <p>If the character <code>$</code> (U+0024) is followed by a name and
    the character <code>;</code> (U+003B), then the name is an entity name,
    and the entire entity reference is replaced according to the following
    rules:</p>

    <list>
      <item><p>If the name is a <link xref="duck_directive#define">user-defined
      entity</link>, the content of that entity is parsed as attribute value
      content, and the result is used. Each entity is parsed in its
      own subcontext, so an entity reference cannot span across multiple
      entities. Parsers must detect cycles in entity references and produce
      an error.</p></item>

      <item><p>Otherwise, if the name is defined in
      <link href="http://www.w3.org/TR/xml-entity-names/">XML Entity Definitions
      for Characters (2nd Edition)</link>, the corresponding value is used.</p></item>

      <item><p>Otherwise, if the name consists only of characters in the ranges
      <code>0-9</code>, <code>a-f</code>, and <code>A-F</code>, that value is
      interpreted as a hexadecimal number, and the Unicode character with that
      code point is used.</p></item>

      <item><p>Otherwise, the entity is unrecognized, and parsers must produce
      an error.</p></item>
    </list>
  </section>
</section>
<!-- END spec -->

</page>
