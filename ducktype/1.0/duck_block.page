<page xmlns="http://projectmallard.org/1.0/"
      type="topic" style="spec spec-no-comparison spec-no-schema"
      id="duck_block">

<info>
  <link type="guide" xref="index" group="block"/>

  <revision docversion="1.0" date="2018-02-02" status="candidate"/>

  <credit type="author copyright">
    <name>Shaun McCance</name>
    <email>shaunm@gnome.org</email>
    <years>2015-2018</years>
  </credit>

  <desc>Implicit paragraphs, semantic block elements, and arbitrary nesting.</desc>

  <include href="../../cc-by-sa-3-0.xml" xmlns="http://www.w3.org/2001/XInclude"/>
</info>

<title>Block Elements</title>

<p style="lead">Paragraphs are implicit. Semantic block elements are
created with leading block declarations. Arbitrary nesting is possible
with indentation.</p>


<!-- BEGIN notes -->
<section id="notes">
  <title>Notes</title>

  <list>
    <item>
      <p>Paragraphs are implicit and are delimited by blank lines.</p>
    </item>

    <item>
      <p>Block elements (except paragraphs) start with block
      declarations on a separate line. Block declarations start with
      a square bracket followed by the element name.</p>
    </item>

    <item>
      <p>Block declarations can contain <link xref="duck_attr">attribute lists</link>.</p>
    </item>

    <item>
      <p>Block elements can be nested as deep as necessary using indentation.</p>
    </item>

    <item>
      <p>Without indentation, block elements usually contain just
      the following block element, which may be an implicit
      paragraph. Some block elements, such as lists and tables,
      have special rules to contain more elements without
      indentation.</p>
    </item>

    <item>
      <p>There is a shorthand notation for
      <link xref="duck_list">block titles, list items, and table cells</link>.</p>
    </item>
  </list>

</section>
<!-- END notes -->


<!-- BEGIN examples -->
<section id="examples">
  <title>Examples</title>

  <p>Write two paragraphs without any special syntax:</p>
  <example><code mime="text/x-ducktype">
This is a paragraph.

This is another paragraph.</code>
<code mime="application/xml"><![CDATA[
<p>This is a paragraph.</p>

<p>This is another paragraph.</p>]]>
</code></example>

  <p>Use a block declaration to create a note:</p>
  <example><code mime="text/x-ducktype">
[note]
This is a paragraph in a note.</code>
<code mime="application/xml"><![CDATA[
<note>
  <p>This is a paragraph in a note.</p>
</note>]]>
</code></example>

  <p>Use indentation to put multiple paragraphs in a note:</p>
  <example><code mime="text/x-ducktype">
[note]
  This is a paragraph in a note.

  This is another paragraph in a note.</code>
<code mime="application/xml"><![CDATA[
<note>
  <p>This is a paragraph in a note.</p>
  <p>This is another paragraph in a note.</p>
</note>]]>
</code></example>

</section>
<!-- END examples -->


<!-- BEGIN spec -->
<section id="spec">
  <title>Specification</title>

  <p>A block element starts with a block declaration (except for several shorthand
  cases, which are described below). A block declaration begins an indented line with a left
  square bracket (<code>[</code>) and a name, followed by either a right square
  bracket (<code>]</code>) or whitespace. If whitespace follows the block name,
  an <link xref="duck_attr">attribute list</link> is opened, and the block
  declaration continues until it is closed, possibly spanning multiple lines.
  There must not be any non-whitespace content on the line that follows the end of the
  block declaration.</p>

  <p>The line following the block declarataion defines that block element's inner
  indent. If that line is blank or indented less than the outer indent
  of the block element, the block element is empty. If a block element has an
  inner indent greater than its outer indent, the block element continues consuming child
  content as long as non-blank lines are indented to at least that level.</p>

  <p>If a block element has an inner indent equal to its outer indent, the block element
  consumes child content according to the following rules:</p>

  <list>
    <item><p>Starter content refers to an info segment, a <code>title</code>
    element, a <code>desc</code> element, and a <code>cite</code> element. It
    can be consumed as described in subsequent cases.</p></item>

    <item><p>If the block element is a <code>list</code>, <code>steps</code>,
    <code>terms</code> or <code>tree</code> element, it can consume
    starter content and then all elements at the same indent level as long as
    they are <code>item</code> elements. Note that the <code>item</code> elements
    themselves may consume same-level child content. Blank lines do not affect
    this case.</p></item>

    <item><p>If the block element is a tree item, it consumes all elements at
    the same indent level as long as they are <code>item</code> elements. Note
    that tree items cannot take block content, so any block content at the
    inner indent level of a tree item must break out of the entire tree. This
    includes implicit paragraphs created for normal text or
    <link xref="duck_fence">fences</link> after there have already been child
    tree items.</p></item>

    <item><p>If the block element is a <code>table</code> element, it can consume
    starter content and then all elements at the same indent level as
    long as they are <code>thead</code>, <code>tfoot</code>, <code>tbody</code>,
    or <code>tr</code> elements. Note that these elements may themselves consume
    same-level child content. Blank lines do not affect this case.</p></item>

    <item><p>If the block element is a <code>thead</code>, <code>tfoot</code>, or
    <code>tbody</code> element, it can consume starter content and then
    all elements at the same indent level as long as they are <code>tr</code>
    elements. Note that the <code>tr</code> elements may themselves consume
    same-level child content. Blank lines do not affect this case.</p></item>

    <item><p>If the block element is a <code>tr</code> element, it can consume
    starter content and then all elements at the same indent level
    as long as they are <code>th</code> or <code>td</code> elements. Note that
    these elements may themselves consume same-level child content. Blank lines
    do not affect this case.</p></item>

    <item><p>Otherwise, the element can consume starter content followed
    by a maximum of one block element at the same level. A blank line always breaks
    out of the block element in this case.</p></item>
  </list>

  <p>If the indented line is normal text content or a
  <link xref="duck_fence">fence</link> and the current block element is not a leaf
  element, an external element, or a tree item without child items, then a Mallard
  <code>p</code> element is implicitly created with its outer and inner indent set
  to the indentation of the line.</p>

  <p>Leaf elements, external elements, and tree items that do not yet have child
  items can consume normal text and fenced blocks. For these elements, if the
  inner indent is the same as the outer indent, they consume normal text and
  fences, as long as they are at the indent level, until a newline is encountered.
  If the inner indent is greater than the outer indent, the same rule applies
  except inside verbatim elements, which consume the newline. Note that newlines
  in fences do not break out of elements.</p>
</section>
<!-- END spec -->

</page>


