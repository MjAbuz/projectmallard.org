<page xmlns="http://projectmallard.org/1.0/"
      type="guide" style="spec-guide"
      id="index">

<info>
  <revision docversion="1.0" date="2011-07-27" status="stub"/>

  <credit type="author copyright">
    <name>Shaun McCance</name>
    <email>shaunm@gnome.org</email>
    <years>2011</years>
  </credit>

  <title type="link" role="-index">Mallard+SVG 1.0 <em>DRAFT</em></title>

  <desc>Scalable vector graphics embedded in Mallard pages.</desc>

  <include href="../../cc-by-sa-3-0.xml" xmlns="http://www.w3.org/2001/XInclude" />
</info>

<title>Mallard+SVG 1.0 DRAFT</title>

<note style="sidebar">
<title>Download Schema</title>
<list style="compact">
  <item><p><link href="http://projectmallard.org/svg/1.0/svg-1.0.rng">RELAX NG XML Syntax</link></p></item>
  <item><p><link href="http://projectmallard.org/svg/1.0/svg-1.0.rnc">RELAX NG Compact Syntax</link></p></item>
</list>
</note>

<!-- BEGIN schema -->
<section id="schema">
<title>Schema</title>

<comment>
<cite>shaunm</cite>
<p>svg:svg is allowed by SVG.Structure.class inside svg:svg. If we allow it
in any block content, and then allow any block content in svg:svg, we have
a non-deterministic situation where svg:svg could be matched by different
paths inside svg:svg. So we add svg:svg to mal_block, but only allow
mal_block_elements in SVG.svg.content. This means that extension fallback
block content in svg:svg won't be valid. It'll work, but this schema won't
validate it correctly.</p>
</comment>

<synopsis><code mime="application/relax-ng-compact-syntax">
# This schema cannot be used on its own. It is designed to be combined
# with the core Mallard schema using the version attribute.
namespace svg = "http://www.w3.org/2000/svg"

include "http://www.w3.org/Graphics/SVG/1.1/rng/svg11.rng" {
start |= notAllowed
}

mal_block |= svg

SVG.svg.content &amp;= mal_block_elements *

SVG.Core.extra.attrib &amp;= mal_attr_mal_link

</code></synopsis>
</section>
<!-- END schema -->

</page>
